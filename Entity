library IEEE;

use IEEE.STD_LOGIC_1164.ALL;

use IEEE.STD_LOGIC_ARITH.ALL;

use IEEE.STD_LOGIC_UNSIGNED.ALL;

 

ENTITY PWM is

    generic( Max: natural := 500000);

    Port ( clk :  in  STD_LOGIC;--reloj de 50MHz

	     botonselector : in std_logic;

             PWM :  out  STD_LOGIC);--terminal donde sale la seÃ±al de PWM

end PWM;

 

ARCHITECTURE behavioral of PWM is

	
signal Contador :integer:=1;
signal Contador2 :integer:=1;

signal PWM_Count: integer range 1 to Max;--500000;
signal selectorPosicion : STD_LOGIC_VECTOR (2 downto 0);--selecciona las 4 posiciones

Type state is (state0, state45, state90,state135,state180);
Signal servo_state, nx_state : state;

signal Clock50 : std_logic ;
signal reset : std_logic ;
signal locked : std_logic ;
signal vv: std_logic:='1';

signal d3, d2, d1, d0 : STD_LOGIC_VECTOR (3 downto 0);
signal s8 : STD_LOGIC_VECTOR (7 downto 0);
signal Enable : STD_LOGIC_VECTOR (3 downto 0);

component clk_wiz_0
port
 (-- Clock in ports
  -- Clock out ports
  clk_50mHz          : out    std_logic;
  -- Status and control signals
  reset             : in     std_logic;
  locked            : out    std_logic;
  clk_in1           : in     std_logic
 );
end component;

component DISPLAY IS
	PORT (
		CLK : IN STD_LOGIC;
		--Primero 
		D3 : IN STD_LOGIC_VECTOR(3 DOWNTO 0);
		D2 : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
		D1 : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
		D0 : IN STD_LOGIC_VECTOR (3 DOWNTO 0);
		--Ultimo 
		S8 : OUT STD_LOGIC_VECTOR (7 DOWNTO 0);
		EN : OUT STD_LOGIC_VECTOR (3 DOWNTO 0)
	);
END component;

begin

Clock_50_MHZ : clk_wiz_0
   port map ( 
  -- Clock out ports  
   clk_50mHz => Clock50, --clock salida
  -- Status and control signals                
   reset => reset,
   locked => locked,
   -- Clock in ports
   clk_in1 => clk  -- Clock Entrada
 );

display7 : Display port map(
CLK => Clock50, D3 => d3, D2 => d2, D1 => d1, D0 => d0,S8 => s8, EN => Enable);

process(Clock50,botonselector)
begin 
if ((rising_edge(Clock50))  and (botonselector = '1')) then
	servo_state<=nx_state;	
	
	
end if;
 end process;



process(servo_state,selectorPosicion)
begin
 case servo_state is

 when state0 =>
	selectorPosicion <= "000";
	nx_state <=state45;
	nx_state <=state45;
        d3 <= "0000";
        d2 <= "0000";
        d1 <= "0000";
        d0 <= "0000";
        
	

 when state45 => 
	selectorPosicion <= "001";
	nx_state <=state90;
	d3 <= "0000";
        d2 <= "0000";
        d1 <= "0100";
        d0 <= "0101";
	

when state90 => 
	selectorPosicion <= "010";
	nx_state <=state135;
	d3 <= "0000";
        d2 <= "0000";
        d1 <= "1001";
        d0 <= "0000";

when state135 =>
	selectorPosicion <= "011";
	nx_state <=state180;
	d3 <= "0000";
        d2 <= "0001";
        d1 <= "0011";
        d0 <= "0101";

when state180 =>
	selectorPosicion <= "100";
	nx_state <=state0;
d3 <= "0000";
        d2 <= "0001";
        d1 <= "1000";
        d0 <= "0000";
	
end case;
end process;
